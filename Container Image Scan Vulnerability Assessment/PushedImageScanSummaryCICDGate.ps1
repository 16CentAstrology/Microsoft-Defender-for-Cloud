<#  
.SYNOPSIS  
  This script will try to extract scan summary for check for an existing image detailed provided  new Qualys or Rapid7 vulnerability assessment (VA) solution in Azure Security Center (ASC).
     
.DESCRIPTION  
  ASC contract VA solution is provided as an integration service. This script uses REST API to create a new Security Solution in ASC.
  The solution requires a license and a key provided by the 3rd party VA provider: Qualys or Rapid7
  Note that only one solution can be created per license. An attempt to create another solution using the same name/license/key will fail.
  You will need to make sure to set the current Azure context to your current subscription. Azure Security Center will automatically decide on a location to save some of your data per subscription.
  The script below will query that location and use it within the REST URI. You can set your Azure context by running the command set-azcontext -subscriptionId <yourSubscriptionID>.
  
.PARAMETER registryName
  [mandatory] 
  The subscriptionID of the Azure Subscription that contains the resources you want to analyze
.PARAMETER repository
  [mandatory] 
  It can be any EXISTING resource group, using the ASC default "DefaultResourceGroup-XXX" is one option.
  Note: Since the ASC VA solution is not an Azure resource it will not be listed under the resource group, but still it is attached to it.
.PARAMETER tag
  [mandatory] 
  The name of the new solution
  
  
.EXAMPLE
	.\New-ASCVASolution.ps1 -subscriptionId <Subscription ID> -resourceGroupName <RG Name> -vaSolutionName <New solution name> -vaType <Qualys/Rapid7> -autoUpdate <true/false> -licenseCode <License acquired by the vendor> -publicKey <Key provided by the vendor>

.EXAMPLE
	.\New-ASCVASolution.ps1 -subscriptionId f4f71b69-dcab-4ce6-8e6f-ea2e92223d3b -resourceGroupName DefaultResourceGroup-WEU -vaSolutionName QualysVaf4f -vaType Qualys -autoUpdate false -licenseCode 'eyJjaWQilkjOiJkZDghkjkjTMzLWM4NTSksjk342OS1mZWM1N2Q3ZGU5MjgiLCJhaWQiOiIyMmM5NDg3MS1lNTVkLTQ1OGItYjhlMC03OTRhMmM3YWM1ZGQiLCJwd3NVcmwiOiJodHRwczovL3FhZ3B1YmxpYy1wMDEuaW50LnF1YWx5cy5jb20vQ2xvdWRBZ2VudC8iLCJwd3NQb3rockjoiAWQzIn0=' -publicKey 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQgdQCOiOLXjOywMfLZIBGPZLwSocf1Q64BEFQS9OHFEmanBl1nkJhZDrZ4YD5qIx3fThYbAx1Rde2iYV1ze/wDlX4cIvFAyXuN1BSv4qeIlBl6vWXEBZpUU17bOdJOUGolzEzNBhtxi/elEZLghq9Chmah82me/okGMIhJJsCiTtglVQIDAQAB'

.NOTES
   AUTHOR: Tomer Weinberger - Software Engineer at Microsoft Azure Security Center

#>

# Prerequisites
# Azure CLI installed
# Optional: Azure CLI Resource Grpah extension installed (installed as part of script)
Param(
	# Image registry name
	$registryName,
	# Image repository name in registry
    $repository,
	# Image tag
    $tag
)

az extension add --name resource-graph -y

$imageDigest = az acr repository show -n $registryName --image "$($repository):$($tag)" -o tsv --query digest


# Query presented above
$query = "securityresources
 | where type == 'microsoft.security/assessments/subassessments'
 | where id matches regex  '(.+?)/providers/Microsoft.Security/assessments/dbd0cb49-b563-45e7-9724-889e799fa648/'
 | extend registryResourceId = tostring(split(id, '/providers/Microsoft.Security/')[0])
 | extend imageDigest = tostring(properties.additionalData.imageDigest), repository = tostring(properties.additionalData.repositoryName)
 | extend scanFindingSeverity = tostring(properties.status.severity), scanStatus = tostring(properties.status.code)
 | summarize scanFindingSeverityCount = count() by scanFindingSeverity, scanStatus, registryResourceId, repository, imageDigest
 | summarize  severitySummary = make_bag(pack(scanFindingSeverity, scanFindingSeverityCount)) by registryResourceId, repository, imageDigest, scanStatus"

# Add filter to get scan summary for specific image
$filter = "| where imageDigest == '$imagedigest' and repository == '$repository' and registryResourceId endswith '/$registryname'" 
$query  = @($query, $filter) | out-string 

Write-Host "Query: $query"

# arg query
$query = $query -replace [Environment]::NewLine,"" 

$result = az graph query -q $query -o json | ConvertFrom-Json

$i = 0
while(!($result = az graph query -q $query -o json | ConvertFrom-Json) -and ($i = $i + 1) -lt 3)
{ 
	Write-Host "No results for image $($repository):$($tag) yet ..."
	Start-Sleep -s 20
}

if(!$result)
{
	Write-Error "No results were found after retries!"
	exit 1
}

# get scan summary for image
$scansummary = $result[0]
Write-Host "Scan summary: $($scansummary | out-string)"

if($scansummary.scanstatus -eq "healthy")
{
  Write-Host "Healthy scan result, no major vulnerabilities  found in image"
}
elseif($scansummary.scanstatus -eq "unhealthy")
{
	# check if there are major vulnerabilities  found - should be aligned by scenario
	if($scansummary.severitysummary.high -gt 0 -or $scansummary.severitysummary.medium -gt 10)
	{
	   Write-Error "Unhealthy scan result, major vulnerabilities  found in image summary"
	}
	else
	{
		Write-Warning "Unhealthy scan result, some vulnerabilities  found in image"
	}
}
else
{
	Write-Error -f yellow "Unknown scan result returned"
}




