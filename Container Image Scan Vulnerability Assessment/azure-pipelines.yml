# Azure Devops Pipeline that build and publish an image, than uses ASC 
# scan results to determins the helalth of the pipeline.
# Enrich Image publish with test of it's scan result to assess if to fail or pass pipeline by scan findings severity.
# This Gate can also be used as a gate for production registry as a pre condition step to publish the image to secure registry.

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  # Read more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#create-a-service-connection
  dockerRegistryServiceConnection: '<ACRRegistryConnection>'
  imageRepository: '<repositoryName>'
  containerRegistry: '<registryName>'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  waitForScanResultsAfterPushInMinutes: '5'
  
  # Agent VM image name
  vmImageName: '<vmImageName>'

stages:
- stage: Build and Publish
  displayName: Build and push image to registry than check for vulnerability scan results to determine publishing health
  jobs:
  # Build Image and push it to onboarded to ASC ACR registry
  - job: BuildAndPush
    displayName: BuildAndPush
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        addPipelineData: false
        tags: |
          $(tag)
          latest
          
    # Wait till ASC vulnerability scan will be completed for pushed image
  - job: WaitForScanResults
    displayName: Wait for Scan result
    pool: Server
    dependsOn: 
    - BuildAndPush
    condition: succeeded()
    steps:
    - task: Delay@1
      inputs:
        delayForMinutes: $(waitForScanResultsAfterPushInMinutes)
    
    # Run Image scan gate - which extracts image scan results and assess whether 
    # to fail the pipeline based on severity threshold configuration.
    # Using the ImageScanSummaryAddessmentGate.ps1 script in same repo folder
  - job: ImageScanGate
    displayName: Image Scan security gate
    pool:
      vmImage: $(vmImageName)
    dependsOn: 
    - BuildAndPush
    - WaitForScanResults
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Rome ILDC â€“ Detection Playground (409111bf-3097-421c-ad68-a44e716edf58)'
        scriptType: 'pscore'
        scriptLocation: 'scriptPath'
        scriptPath: '$(Build.SourcesDirectory)/ImageScanSummaryAddessmentGate.ps1'
        arguments: '-registryName $(containerRegistry) -repository $(imageRepository) -tag $(tag)'
      
